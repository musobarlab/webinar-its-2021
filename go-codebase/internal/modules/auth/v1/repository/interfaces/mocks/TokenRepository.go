// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "gitlab.com/Wuriyanto/go-codebase/internal/modules/auth/v1/domain"

import mock "github.com/stretchr/testify/mock"
import shared "gitlab.com/Wuriyanto/go-codebase/pkg/shared"
import time "time"

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// Generate provides a mock function with given fields: ctx, payload, expired
func (_m *TokenRepository) Generate(ctx context.Context, payload *domain.TokenClaim, expired time.Duration) <-chan shared.Result {
	ret := _m.Called(ctx, payload, expired)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TokenClaim, time.Duration) <-chan shared.Result); ok {
		r0 = rf(ctx, payload, expired)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, token
func (_m *TokenRepository) Refresh(ctx context.Context, token string) <-chan shared.Result {
	ret := _m.Called(ctx, token)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Revoke provides a mock function with given fields: ctx, token
func (_m *TokenRepository) Revoke(ctx context.Context, token string) <-chan shared.Result {
	ret := _m.Called(ctx, token)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, token
func (_m *TokenRepository) Validate(ctx context.Context, token string) <-chan shared.Result {
	ret := _m.Called(ctx, token)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}
