// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import shared "gitlab.com/Wuriyanto/go-codebase/pkg/shared"
import time "time"
import token "gitlab.com/Wuriyanto/go-codebase/pkg/token"

// Token is an autogenerated mock type for the Token type
type Token struct {
	mock.Mock
}

// Generate provides a mock function with given fields: ctx, payload, expired
func (_m *Token) Generate(ctx context.Context, payload *token.Claim, expired time.Duration) <-chan shared.Result {
	ret := _m.Called(ctx, payload, expired)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, *token.Claim, time.Duration) <-chan shared.Result); ok {
		r0 = rf(ctx, payload, expired)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, _a1
func (_m *Token) Refresh(ctx context.Context, _a1 string) <-chan shared.Result {
	ret := _m.Called(ctx, _a1)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Revoke provides a mock function with given fields: ctx, _a1
func (_m *Token) Revoke(ctx context.Context, _a1 string) <-chan shared.Result {
	ret := _m.Called(ctx, _a1)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, _a1
func (_m *Token) Validate(ctx context.Context, _a1 string) <-chan shared.Result {
	ret := _m.Called(ctx, _a1)

	var r0 <-chan shared.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan shared.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan shared.Result)
		}
	}

	return r0
}
